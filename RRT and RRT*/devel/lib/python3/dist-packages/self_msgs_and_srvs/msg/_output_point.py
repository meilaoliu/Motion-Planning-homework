# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from self_msgs_and_srvs/output_point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class output_point(genpy.Message):
  _md5sum = "5cbc628d4028ac02bd3f45d03121084c"
  _type = "self_msgs_and_srvs/output_point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point pos_mu
geometry_msgs/Point pos_var

geometry_msgs/Point vel_mu 
geometry_msgs/Point vel_var

# geometry_msgs/Point theta_mu 
# geometry_msgs/Point theta_var

geometry_msgs/Point acc_mu
geometry_msgs/Point acc_var


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['pos_mu','pos_var','vel_mu','vel_var','acc_mu','acc_var']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos_mu,pos_var,vel_mu,vel_var,acc_mu,acc_var

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(output_point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pos_mu is None:
        self.pos_mu = geometry_msgs.msg.Point()
      if self.pos_var is None:
        self.pos_var = geometry_msgs.msg.Point()
      if self.vel_mu is None:
        self.vel_mu = geometry_msgs.msg.Point()
      if self.vel_var is None:
        self.vel_var = geometry_msgs.msg.Point()
      if self.acc_mu is None:
        self.acc_mu = geometry_msgs.msg.Point()
      if self.acc_var is None:
        self.acc_var = geometry_msgs.msg.Point()
    else:
      self.pos_mu = geometry_msgs.msg.Point()
      self.pos_var = geometry_msgs.msg.Point()
      self.vel_mu = geometry_msgs.msg.Point()
      self.vel_var = geometry_msgs.msg.Point()
      self.acc_mu = geometry_msgs.msg.Point()
      self.acc_var = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18d().pack(_x.pos_mu.x, _x.pos_mu.y, _x.pos_mu.z, _x.pos_var.x, _x.pos_var.y, _x.pos_var.z, _x.vel_mu.x, _x.vel_mu.y, _x.vel_mu.z, _x.vel_var.x, _x.vel_var.y, _x.vel_var.z, _x.acc_mu.x, _x.acc_mu.y, _x.acc_mu.z, _x.acc_var.x, _x.acc_var.y, _x.acc_var.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos_mu is None:
        self.pos_mu = geometry_msgs.msg.Point()
      if self.pos_var is None:
        self.pos_var = geometry_msgs.msg.Point()
      if self.vel_mu is None:
        self.vel_mu = geometry_msgs.msg.Point()
      if self.vel_var is None:
        self.vel_var = geometry_msgs.msg.Point()
      if self.acc_mu is None:
        self.acc_mu = geometry_msgs.msg.Point()
      if self.acc_var is None:
        self.acc_var = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.pos_mu.x, _x.pos_mu.y, _x.pos_mu.z, _x.pos_var.x, _x.pos_var.y, _x.pos_var.z, _x.vel_mu.x, _x.vel_mu.y, _x.vel_mu.z, _x.vel_var.x, _x.vel_var.y, _x.vel_var.z, _x.acc_mu.x, _x.acc_mu.y, _x.acc_mu.z, _x.acc_var.x, _x.acc_var.y, _x.acc_var.z,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18d().pack(_x.pos_mu.x, _x.pos_mu.y, _x.pos_mu.z, _x.pos_var.x, _x.pos_var.y, _x.pos_var.z, _x.vel_mu.x, _x.vel_mu.y, _x.vel_mu.z, _x.vel_var.x, _x.vel_var.y, _x.vel_var.z, _x.acc_mu.x, _x.acc_mu.y, _x.acc_mu.z, _x.acc_var.x, _x.acc_var.y, _x.acc_var.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos_mu is None:
        self.pos_mu = geometry_msgs.msg.Point()
      if self.pos_var is None:
        self.pos_var = geometry_msgs.msg.Point()
      if self.vel_mu is None:
        self.vel_mu = geometry_msgs.msg.Point()
      if self.vel_var is None:
        self.vel_var = geometry_msgs.msg.Point()
      if self.acc_mu is None:
        self.acc_mu = geometry_msgs.msg.Point()
      if self.acc_var is None:
        self.acc_var = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.pos_mu.x, _x.pos_mu.y, _x.pos_mu.z, _x.pos_var.x, _x.pos_var.y, _x.pos_var.z, _x.vel_mu.x, _x.vel_mu.y, _x.vel_mu.z, _x.vel_var.x, _x.vel_var.y, _x.vel_var.z, _x.acc_mu.x, _x.acc_mu.y, _x.acc_mu.z, _x.acc_var.x, _x.acc_var.y, _x.acc_var.z,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18d = None
def _get_struct_18d():
    global _struct_18d
    if _struct_18d is None:
        _struct_18d = struct.Struct("<18d")
    return _struct_18d

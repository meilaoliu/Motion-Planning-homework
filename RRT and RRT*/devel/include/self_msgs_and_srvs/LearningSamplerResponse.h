// Generated by gencpp from file self_msgs_and_srvs/LearningSamplerResponse.msg
// DO NOT EDIT!


#ifndef SELF_MSGS_AND_SRVS_MESSAGE_LEARNINGSAMPLERRESPONSE_H
#define SELF_MSGS_AND_SRVS_MESSAGE_LEARNINGSAMPLERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <self_msgs_and_srvs/output_point.h>

namespace self_msgs_and_srvs
{
template <class ContainerAllocator>
struct LearningSamplerResponse_
{
  typedef LearningSamplerResponse_<ContainerAllocator> Type;

  LearningSamplerResponse_()
    : output_traj()  {
    }
  LearningSamplerResponse_(const ContainerAllocator& _alloc)
    : output_traj(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::self_msgs_and_srvs::output_point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::self_msgs_and_srvs::output_point_<ContainerAllocator> >> _output_traj_type;
  _output_traj_type output_traj;





  typedef boost::shared_ptr< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LearningSamplerResponse_

typedef ::self_msgs_and_srvs::LearningSamplerResponse_<std::allocator<void> > LearningSamplerResponse;

typedef boost::shared_ptr< ::self_msgs_and_srvs::LearningSamplerResponse > LearningSamplerResponsePtr;
typedef boost::shared_ptr< ::self_msgs_and_srvs::LearningSamplerResponse const> LearningSamplerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator1> & lhs, const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output_traj == rhs.output_traj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator1> & lhs, const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace self_msgs_and_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "875d2f319e4959b3d97b0dd27254317e";
  }

  static const char* value(const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x875d2f319e4959b3ULL;
  static const uint64_t static_value2 = 0xd97b0dd27254317eULL;
};

template<class ContainerAllocator>
struct DataType< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "self_msgs_and_srvs/LearningSamplerResponse";
  }

  static const char* value(const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "self_msgs_and_srvs/output_point[] output_traj\n"
"\n"
"\n"
"================================================================================\n"
"MSG: self_msgs_and_srvs/output_point\n"
"geometry_msgs/Point pos_mu\n"
"geometry_msgs/Point pos_var\n"
"\n"
"geometry_msgs/Point vel_mu \n"
"geometry_msgs/Point vel_var\n"
"\n"
"# geometry_msgs/Point theta_mu \n"
"# geometry_msgs/Point theta_var\n"
"\n"
"geometry_msgs/Point acc_mu\n"
"geometry_msgs/Point acc_var\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output_traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LearningSamplerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::self_msgs_and_srvs::LearningSamplerResponse_<ContainerAllocator>& v)
  {
    s << indent << "output_traj[]" << std::endl;
    for (size_t i = 0; i < v.output_traj.size(); ++i)
    {
      s << indent << "  output_traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::self_msgs_and_srvs::output_point_<ContainerAllocator> >::stream(s, indent + "    ", v.output_traj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SELF_MSGS_AND_SRVS_MESSAGE_LEARNINGSAMPLERRESPONSE_H
